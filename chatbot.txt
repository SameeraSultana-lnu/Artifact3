A chatbot (also known as a talkbot, chatterbot, Bot, IM bot, interactive agent, or Artificial Conversational Entity) is a computer program or an artificial intelligence which conducts a conversation via auditory or textual methods. Such programs are often designed to convincingly simulate how a human would behave as a conversational partner, thereby passing the Turing test. Chatbots are typically used in dialog systems for various practical purposes including customer service or information acquisition. Some chatterbots use sophisticated natural language processing systems, but many simpler systems scan for keywords within the input, then pull a reply with the most matching keywords, or the most similar wording pattern, from a database.

The term "ChatterBot" was originally coined by Michael Mauldin (creator of the first Verbot, Julia) in 1994 to describe these conversational programs.Today, most chatbots are either accessed via virtual assistants such as Google Assistant and Amazon Alexa, via messaging apps such as Facebook Messenger or WeChat, or via individual organizations' apps and websites. Chatbots can be classified into usage categories such as conversational commerce (e-commerce via chat), analytics, communication, customer support, design, developer tools, education, entertainment, finance, food, games, health, HR, marketing, news, personal, productivity, shopping, social, sports, travel and utilities.
Background
In 1950, Alan Turing's famous article "Computing Machinery and Intelligence" was published, which proposed what is now called the Turing test as a criterion of intelligence. This criterion depends on the ability of a computer program to impersonate a human in a real-time written conversation with a human judge, sufficiently well that the judge is unable to distinguish reliably on the basis of the conversational content alone between the program and a real human. The notoriety of Turing's proposed test stimulated great interest in Joseph Weizenbaum's program ELIZA, published in 1966, which seemed to be able to fool users into believing that they were conversing with a real human. However Weizenbaum himself did not claim that ELIZA was genuinely intelligent, and the Introduction to his paper presented it more as a debunking exercise:

[In] artificial intelligence ... machines are made to behave in wondrous ways, often sufficient to dazzle even the most experienced observer. But once a particular program is unmasked, once its inner workings are explained ... its magic crumbles away; it stands revealed as a mere collection of procedures ... The observer says to himself "I could have written that". With that thought he moves the program in question from the shelf marked "intelligent", to that reserved for curios ... The object of this paper is to cause just such a re-evaluation of the program about to be "explained". Few programs ever needed it more.

ELIZA's key method of operation (copied by chatbot designers ever since) involves the recognition of cue words or phrases in the input, and the output of corresponding pre-prepared or pre-programmed responses that can move the conversation forward in an apparently meaningful way (e.g. by responding to any input that contains the word 'MOTHER' with 'TELL ME MORE ABOUT YOUR FAMILY').Thus an illusion of understanding is generated, even though the processing involved has been merely superficial. ELIZA showed that such an illusion is surprisingly easy to generate, because human judges are so ready to give the benefit of the doubt when conversational responses are capable of being interpreted as "intelligent".

Interface designers have come to appreciate that humans' readiness to interpret computer output as genuinely conversational even when it is actually based on rather simple pattern-matching can be exploited for useful purposes. Most people prefer to engage with programs that are human-like, and this gives chatbot-style techniques a potentially useful role in interactive systems that need to elicit information from users, as long as that information is relatively straightforward and falls into predictable categories. Thus, for example, online help systems can usefully employ chatbot techniques to identify the area of help that users require, potentially providing a "friendlier" interface than a more formal search or menu system. This sort of usage holds the prospect of moving chatbot technology from Weizenbaum's "shelf ... reserved for curios" to that marked "genuinely useful computational methods".

Development
The classic historic early chatbots are ELIZA (1966) and PARRY (1972).More recent notable programs include A.L.I.C.E., Jabberwacky and D.U.D.E (Agence Nationale de la Recherche and CNRS 2006). While ELIZA and PARRY were used exclusively to simulate typed conversation, many chatbots now include functional features such as games and web searching abilities. In 1984, a book called The Policeman's Beard is Half Constructed was published, allegedly written by the chatbot Racter (though the program as released would not have been capable of doing so).

One pertinent field of AI research is natural language processing. Usually, weak AI fields employ specialized software or programming languages created specifically for the narrow function required. For example, A.L.I.C.E. uses a markup language called AIML, which is specific to its function as a conversational agent, and has since been adopted by various other developers of, so called, Alicebots. Nevertheless, A.L.I.C.E. is still purely based on pattern matching techniques without any reasoning capabilities, the same technique ELIZA was using back in 1966. This is not strong AI, which would require sapience and logical reasoning abilities.

Jabberwacky learns new responses and context based on real-time user interactions, rather than being driven from a static database. Some more recent chatbots also combine real-time learning with evolutionary algorithms that optimise their ability to communicate based on each conversation held. Still, there is currently no general purpose conversational artificial intelligence, and some software developers focus on the practical aspect, information retrieval.

Chatbot competitions focus on the Turing test or more specific goals. Two such annual contests are the Loebner Prize and The Chatterbox Challenge (offline since 2015, materials can still be found from web archives).

According to Forrester (2015), AI will replace 16 percent of American jobs by the end of the decade.Chatbots have been used in applications such as customer service, sales and product education. However, a study conducted by Narrative Science in 2015 found that 80 percent of their respondents believe AI improves worker performance and creates jobs.[citation needed]

Application
See also: Virtual assistant

Aeromexico airline chatbot running on Facebook Messenger, March 2018
Messaging apps
Many companies' chatbots run on messaging apps like Facebook Messenger (since 2016), WeChat (since 2013),WhatsApp, LiveChat, Kik, Slack, Line, Telegram, or simply via SMS. They are used for B2C customer service, sales and marketing.

In 2016, Facebook Messenger allowed developers to place chatbots on their platform. There were 30,000 bots created for Messenger in the first six months, rising to 100,000 by September 2017.

Since September 2017, this has also been as part of a pilot program on WhatsApp. Airlines KLM and Aerom xico both announced their participation in the testing;both airlines had previously launched customer services on the Facebook Messenger platform.

The bots usually appear as one of the user's contacts, but can sometimes act as participants in a group chat.

Many banks and insurers, media and e-commerce companies, airlines and hotel chains, retailers, health care providers, government entities and restaurant chains have used chatbots to answer simple questions, increase customer engagement,for promotion, and to offer additional ways to order from them.

A 2017 study showed 4% of companies used chatbots.According to a 2016 study, 80% of businesses said they intended to have one by 2020.

As part of company apps and websites
Previous generations of chatbots were present on company websites, e.g. Ask Jenn from Alaska Airlines which debuted in 2008 or Expedia's virtual customer service agent which launched in 2011.The newer generation of chatbots includes IBM Watson-powered "Rocky", introduced in February 2017 by the New York City-based e-commerce company Rare Carat to provide information to prospective diamond buyers.

Company internal platforms
Other companies explore ways they can use chatbots internally, for example for Customer Support, Human Resources, or even in Internet-of-Things (IoT) projects. Overstock.com, for one, has reportedly launched a chatbot named Mila to automate certain simple yet time-consuming processes when requesting for a sick leave.Other large companies such as Lloyds Banking Group, Royal Bank of Scotland, Renault and Citro n are now using automated online assistants instead of call centres with humans to provide a first point of contact. A SaaS chatbot business ecosystem has been steadily growing since the F8 Conference when Zuckerberg unveiled that Messenger would allow chatbots into the app.

Toys
Chatbots have also been incorporated into devices not primarily meant for computing such as toys.

Hello Barbie is an Internet-connected version of the doll that uses a chatbot provided by the company ToyTalk,which previously used the chatbot for a range of smartphone-based characters for children.These characters' behaviors are constrained by a set of rules that in effect emulate a particular character and produce a storyline.

IBM's Watson computer has been used as the basis for chatbot-based educational toys for companies such as CogniToys intended to interact with children for educational purposes.

Chatbot creation
The process of creating a chatbot follows a pattern similar to the development of a web page or a mobile app, It can be divided into Design, Building, Analytics and Maintenance.

Design
The chatbot design is the process that defines the interaction between the user and the chatbot.The chatbot designer will define the chatbot personality, the questions that will be asked to the users, and the overall interaction.It can be viewed as a subset of the conversational design. In order to speed up this process, designers can use dedicated chatbot design tools, that allow for immediate preview, team collaboration and video export.An important part of the chatbot design is also centered around user testing. User testing can be performed following the same principles that guide the user testing of graphical interfaces.

Building
The process of building a chatbot can be divided into two main tasks: understanding the user's intent and producing the correct answer. The first task involves understanding the user input. In order to properly understand a user input in a free text form, a Natural Language Processing Engine can be used.The second task may involve different approaches depending on the type of the response that the chatbot will generate.

Analytics
The usage of the chatbot can be monitored in order to spot potential flaws or problems. It can also provide useful insights that can improve the final user experience.

Maintenance
To keep chatbots up to speed with changing company products and services, traditional chatbot development platforms require ongoing maintenance. This can either be in the form of an ongoing service provider or for larger enterprises in the form of an in-house chatbot training team.To eliminate these costs, some startups are experimenting with Artificial Intelligence to develop self-learning chatbots, particularly in Customer Service applications.

Machine Learning
Machine Learning (ML) is a branch of artificial intelligence (AI) that allows computers to learn and make predictions or decisions without being explicitly programmed for each task. Instead, use data to “train” to understand patterns, make predictions, and improve performance over time.

In simpler terms, ML enables computers to automatically improve their performance on a task through experience. Just like humans learn from their experiences, machines learn from the data provided to them.

Types of Machine Learning
There are three main types of machine learning:
1. Supervised Learning
2. Unsupervised Learning
3. Reinforcement Learning

Let’s break down each type and see how they work.

Supervised Learning
In Supervised Learning, the model is trained on labeled data, meaning each input (the data) has a corresponding output (the label). The model learns the relationship between inputs and outputs and can then predict outputs for new, unseen data.

Example:
- Suppose you have a dataset of houses where each house is described by its features (size, number of rooms, location) and a label (price of the house). You can train a supervised learning model to predict the price of a new house based on its features.

Simple Analogy:
Think of a student learning math with a teacher. The teacher (data labels) gives the student (the model) correct answers during practice. Over time, the student learns to solve similar problems on their own.

Unsupervised Learning
In Unsupervised Learning, the data does not have labels. The model is given only the inputs and must find patterns or relationships between them. It often groups similar data points together.

Example:
- Imagine you have a large set of images of different animals, but none of the images are labeled (no “dog,” “cat,” etc.). An unsupervised learning algorithm could group similar images together, forming clusters, even if it doesn’t know what the animals are.

Simple Analogy:
It’s like a person sorting different types of fruits without knowing their names. The person groups similar-looking fruits together (apples in one group, oranges in another) without knowing exactly what they are.

Reinforcement Learning
Reinforcement Learning (RL) involves an agent (a model) that learns through trial and error by interacting with an environment. The agent receives rewards for good actions and penalties for bad actions and adjusts its behavior to maximize rewards over time.

Example:
- In a video game, an RL agent learns to play by making moves and receiving points (rewards) or losing lives (penalties). Over time, it figures out the best strategies to win the game.

Simple Analogy:
Imagine teaching a pet a new trick. Every time the pet performs the trick correctly, you give it a treat (reward). If the pet does something wrong, you don’t give a treat (penalty). Over time, the pet learns to perform the trick correctly to get the treat.

Differences Between Supervised, Unsupervised, and Reinforcement Learning

Differences Between Supervised, Unsupervised, and Reinforcement Learning
Supervised Learning: Train and Test a Model (Simple Example)
In Supervised Learning, we train a model using a dataset where we already know the correct answers (labels). After training, we evaluate the model’s performance on a separate “test set” to see how well it can predict new data.

Steps:

1. Train the Model: Use a portion of the data (the training set) to teach the model.
2. Test the Model: Use the remaining data (the test set) to evaluate the model’s performance on unseen examples.


Why Split Data?
- Training Set: Used to teach the model by showing it examples with known answers.
- Test Set: Used to see how well the model performs on data it has never seen before. This helps check if the model is overfitting (performing well on training but poorly on new data) or generalizing well.

Predictions are made on the test set, and the Mean Squared Error (MSE) is calculated to measure how well the model is performing. The lower the MSE, the better the model’s predictions.

Machine Learning offers powerful tools for making predictions and uncovering insights from data. By understanding the key types (Supervised, Unsupervised, and Reinforcement Learning) and using simple models, you can begin to explore its potential. Supervised learning is often the easiest to start with since you have labeled data, and you can quickly test models with real-world applications like house price prediction or flower classification.

Regression vs. Classification
In machine learning, there are two main types of tasks:

Classification
Regression
1. Classification
Classification involves predicting a category or class label. The output is discrete, meaning the model tries to classify data into predefined labels or groups.

Example:

Predicting whether an email is “spam” or “not spam” (two distinct classes).
Classifying a flower as one of three species based on its features.
2. Regression
Regression involves predicting a continuous value or quantity. The output is continuous, meaning the model predicts a value on a numerical scale.

Example:

Predicting the price of a house based on its features (like size, number of rooms, location).
Forecasting the temperature tomorrow based on historical data.
Understanding Linear Regression
Linear regression is one of the most basic types of regression analysis. It is used to predict a continuous value by modeling the relationship between an independent variable (input) and a dependent variable (output).

Linear Regression Example
Above example of predicting house prices based on the size of the house was an example of linear regression. Linear regression would model this relationship using a straight line:


Linear Regression

Linear Regression
We plot the original data and the fitted line to visually see how well the model captures the relationship.

Multivariable (Multiple) Linear Regression
Multiple Linear Regression is an extension of simple linear regression where we use multiple input features (variables) to predict the output.

Instead of just predicting house prices based on size, we could also consider the number of rooms, location, or age of the house. The equation would now look like this:


Multivariable Regression
Understanding the Cost Function in Machine Learning
A cost function (sometimes called a loss function or error function) is a mathematical function that tells us how far our model’s predictions are from the actual results. It essentially gives a score to a model’s performance: the higher the score, the worse the model; the lower the score, the better the model.

The ultimate goal is to minimize the cost function, which would mean that the model’s predictions are as close to the actual values as possible.

In the case of Gradient Descent, the algorithm adjusts the parameters in such a way that the cost function decreases with each iteration until it reaches a minimum value (the lowest point in the cost function). At this minimum, the model is making the best possible predictions given the training data.

Types of Cost Functions in Machine Learning
1. For Regression (e.g., Linear Regression)*:
The most common cost function for linear regression is the Mean Squared Error (MSE), which looks at the difference between the predicted and actual values, squares them (to avoid negative differences), and averages them over the entire dataset.


MSE
Where:

n is the number of training examples.
y(i) is the predicted value for the i-th training example.
y(i)^ is the actual value for the i-th training example.

2. For Classification (e.g., Logistic Regression):
The cost function is often the Logarithmic Loss (also known as Cross-Entropy Loss), which measures the error in classifying between categories. For binary classification, this function looks like:

log loss
Complexity with Multiple Variables (Features)
As we move from simple linear regression (with one feature) to multiple linear regression (with several features), the complexity of the model increases. When we add more features to our dataset, it becomes challenging to compute the optimal values for the parameters (coefficients) using analytical methods like the Gradient descent.

Limitations of Linear Regression
Linear regression, though a very powerful algorithm, has certain disadvantages

1. Main limitation of Linear Regression is the assumption of linearity between the dependent variable and the independent variables. In the real world, the data is almost never linearly separable. The assumption that there is a straight-line relationship is usually wrong.

2. Prone to noise and overfitting: If the number of observations are lesser than the number of features, Linear Regression should not be used, otherwise it may lead to overfit, and the relationship thus formed will be noisy.

3. Prone to outliers: Linear regression is very sensitive to outliers. An outlier can be considered as an anomaly. It refers to a datapoint which has no clear relationship with any other data point in the data. So, outliers should be analyzed and removed before applying Linear Regression to the dataset, or the linear relationship formed would be highly skewed.


Linear line formed will not correctly predict the results of data points (shown in blue)
Gradient Descent
Gradient Descent is an optimization algorithm used to minimize the cost function by iteratively updating the parameters (coefficients). Gradient Descent iteratively moves toward the optimal solution by following the slope of the cost function.


Intuition Behind Gradient Descent
Imagine you are standing on a mountain peak and want to reach the lowest point (valley). You can’t see where the valley is because you’re blindfolded. The only thing you can do is feel the ground near you and step in the direction where the slope decreases.


In this analogy:

The mountain is the cost function.
The goal is to minimize the cost, i.e., find the point with the lowest value (the valley).
Each step you take corresponds to updating the parameters (coefficients) of the model.
How Gradient Descent Works:
Initialize Parameters: Start by assigning random values to the parameters (coefficients).
Compute the Cost Function: The cost function represents the error between the predicted values and actual values. In linear regression, this is often the Mean Squared Error.
Calculate the Gradient (Slope): Compute the slope of the cost function with respect to each parameter. This slope tells us the direction to move the parameters to reduce the cost.
Update Parameters: Adjust the parameters using the gradient and a learning rate (which controls the size of the steps).
Repeat: Continue this process until the parameters converge (when further updates make minimal improvements).
Importance of Learning Rate
The learning rate (α) is a crucial hyperparameter that controls how large each update step is. Learning rate controls how much the coefficients can change on each iteration. If the learning rate is too large, the algorithm might overshoot the minimum and fail to converge. If it’s too small, the algorithm might take too long to find the minimum.


Learning Rate
Small Learning Rate: Slow convergence, but more precise.
Large Learning Rate: Faster, but risks overshooting and not finding the minimum.

Feature Scaling in Machine Learning
When working with machine learning algorithms, the features (input variables) can often have different scales. For instance, if one feature is measured in kilometers and another in meters, the range of values can differ significantly. Feature scaling helps normalize or standardize these features, ensuring that the model treats them equally during training.

Why Feature Scaling is Important?
Many machine learning algorithms, especially those based on distance or gradient descent, are sensitive to the scale of the input features. Some examples include:

Gradient Descent: The convergence of gradient descent is faster when features are on a similar scale. Without scaling, features with larger ranges dominate the optimization process, making it inefficient.
Types of Feature Scaling
Min-Max Normalization (Rescaling)
Standardization (Z-score scaling)
Let’s explore both techniques with simple examples.

1. Min-Max Normalization
Min-Max normalization scales the data to a fixed range, typically between 0 and 1. Each feature’s minimum value becomes 0, and the maximum value becomes 1.


Where:

X is the original feature value,
Xmin, Xmax​ are the minimum and maximum values of that feature.
When to Use Min-Max Scaling?
Use Min-Max scaling when you know that the distribution of your data does not contain extreme outliers and is relatively uniform.
It’s commonly used in algorithms like KNN, which are based on distances between data points.
2. Standardization (Z-score Scaling)
Standardization (also called Z-score scaling) transforms the data to have a mean of 0 and a standard deviation of 1. It centers the data by subtracting the mean and then scales by dividing by the standard deviation.


Where:

X is the original feature value,
μ is the mean of the feature,
σ is the standard deviation of the feature.
When to Use Standardization?
Standardization is useful when your data has outliers or when the distribution of features is not uniform.
It’s widely used in algorithms that rely on the Gaussian distribution, such as logistic regression, linear regression, and support vector machines.
When is Feature Scaling Not Necessary?
Not all algorithms are sensitive to the scale of features. For example:

Tree-based models (like Decision Trees, Random Forests) do not require feature scaling since they are based on splitting points in the data and are not sensitive to the relative scales of the features.
Naive Bayes is also insensitive to feature scaling because it relies on probabilities rather than distance or magnitude.

Chatbot development platforms
The process of building, testing and deploying chatbots can be done on cloud based chatbot development platforms offered by cloud Platform as a Service (PaaS) providers such as Yekaliva, Oracle Cloud Platform, SnatchBot and IBM Watson.These cloud platforms provide Natural Language Processing, Artificial Intelligence and Mobile Backend as a Service for chatbot development.

APIs
There are many APIs available for building your own chatbots, such as AARC.

Malicious use
Malicious chatbots are frequently used to fill chat rooms with spam and advertisements, by mimicking human behaviour and conversations or to entice people into revealing personal information, such as bank account numbers. They are commonly found on Yahoo! Messenger, Windows Live Messenger, AOL Instant Messenger and other instant messaging protocols. There has also been a published report of a chatbot used in a fake personal ad on a dating service's website.